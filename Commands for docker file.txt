docker run -dit --mount type=bind,source="$(pwd)",target="/JavaCode" --name rw2 ghcr.io/graalvm/graalvm-ce:latest bash

install https://github.com/oracle/graal.git
git clone https://github.com/oracle/graal.git

docker run -dit --mount type=bind,source="$(pwd)",target="/JavaCode" --name "$(NAME)" ubuntu

apt update -y
apt install -y maven \
openjdk-13 \
git

docker build -f /path/to/a/Dockerfile .
docker build . -t [tag of the image that is forming by the build]

RUN mvn exec:java -Dexec.mainClass="orc.main"


docker compose up
docker stack deploy --compose-file docker-compose.yml [name of services]
docker stack rm [name of services]

docker swarm join-token worker
docker swarm join-token manager



mvn clean install compile package
//// java -cp target/testORC-1.0.jar orc.main "hello" <- deprecated jeje




java -cp target/testORC-1.0.jar orc.main "insert" "/JavaCode/testORC/testFile.orc" "struct<name:string,val:int>" "{\"values\":[[\"kris\",\"4\"],[\"hel\",\"3\"],[\"bye\",\"10\"]]}"



"select * from mytable where mytable.id > 20;"
"struct<id:int,name:string,email:string,address:string>"







TODO:
-create dockerfile with dependencies to run the project
-Create organized maven project
-shards     // 100 MBytes
-add limits to batch
-Integrate GraaValVM



Docker Commands to create the cluster
docker network create -d bridge dbms  <-- instead of bridge it would be "overlay" if the network is shared in nodes

docker volume create --name comvol


mvn clean install

docker run -[d]it --name ss maven bash
docker cp Distributed-DBMS/ [NAME OF CONTAINER]:/
docker network connect --alias {alias of container} [name of connection] {NAME OF CONTAINER}
docker start -ai ss bash
mvn clean install


mvn exec:java -Dexec.mainClass="orc.main"

docker run --name c3 -p 7271:7271 -it maven bash
jdbc:postgresql://postgresql:5432/postgres

docker run --name postgresql -e POSTGRES_USER=myusername -e POSTGRES_DB=test -e POSTGRES_PASSWORD=mypassword -p 5433:5432 -d postgres

docker pull apacheignite/ignite
docker run -d -p 10800:10800 apacheignite/ignite

SWARMPIT -- tracker
docker run -it --rm \
  --name swarmpit-installer \
  --volume /var/run/docker.sock:/var/run/docker.sock \
swarmpit/install:1.9




java -jar test-ORC.jar


docker network create -d bridge nettest

Server
docker run -itd --name test openjdk
docker network connect --alias server nettest test
docker cp Main.java test:/
docker exec -it test bash
javac Main.Class
java Main

Client
docker run -itd --name test2 openjdk
docker network connect --alias client nettest test2
docker cp Main.java test2:/
docker exec -it test2 bash
javac Main.Class
java Main

--------------------------------------------------------------

import java.net.Socket;
import java.nio.charset.StandardCharsets;
import org.json.JSONArray;
import org.json.JSONObject;

int APP_PORT  = 7272;
Socket socket = new Socket("c1", APP_PORT);

OutputStream out = socket.getOutputStream();
InputStream in = socket.getInputStream();


JSONArray array = new JSONArray();
array.put(0, "scan");
array.put(1, "/mytable/hello.orc");
array.put(2, "id, name");
array.put(3, "(id>4)");
array.put(4, "/mytable/hello.orc");
JSONObject obj = new JSONObject();
obj.put("plan", array);

apt-get install redis-tools

String args = obj.toString();
out.write(args.getBytes(StandardCharsets.UTF_8));
out.flush();

String received = "";
byte[] response;
response = in.readAllBytes();
received = new String(response);


Links that are important

https://generatedata.com
https://www.digitalocean.com/community/tutorials/how-to-set-up-an-nfs-mount-on-ubuntu-20-04

https://www.tecmint.com/install-nfs-server-on-ubuntu/

https://stackoverflow.com/questions/50042225/how-do-i-combine-or-merge-small-orc-files-into-larger-orc-file
https://programmerall.com/article/62732193206/


things to load:
docker run -d -p 10800:10800 --name ignite apacheignite/ignite
docker run -d -p 5434:5432 -e POSTGRES_USER=myusername -e POSTGRES_DB=test -e POSTGRES_PASSWORD=mypassword --name postgres postgres
docker run -d -p 6379:6379 --name redis redis


docker run -d -p 10800:10800 --name ignite --network cloud --network-alias postgresql apacheignite/ignite
docker run -d -p 5432:5432 --name postgres --network cloud --network-alias postgresql -e POSTGRES_USER=myusername -e POSTGRES_DB=test -e POSTGRES_PASSWORD=mypassword postgres
docker run -d -p 6379:6379 --name redis --network cloud --network-alias redis redis

#  redis:
#    image: redis:latest
#    container_name: redis
#    ports:
#      - target: 6379
#        published: 6379
#        protocol: tcp
#        mode: host
#    networks:
#      cloud:
#        aliases:
#          - redis
#  postgresql:
#    image: postgres
#    container_name: postgres
#    environment:
#      - POSTGRES_USER=myusername
#      - POSTGRES_DB=test
#      - POSTGRES_PASSWORD=mypassword
#    ports:
#      - target: 5432
#        published: 5434
#        protocol: tcp
#        mode: host
#    networks:
#      cloud:
#        aliases:
#          - postgresql

